类和对象

    1，类的引入
        C语言中，结构体中只能定义变量，在C++中，结构体内不仅可以定义变量，也可以定义函数
	   （C++中更喜欢用class来代替。struct:默认共有；class：默认私有）
	   
	2，类的定义
	    a，声明和定义全部放在类体中，
	       需要注意：成员函数如果在类中定义，编译器可能会将其当成内联函数处理
	    b， 声明放在.h文件中，类的定义放在.cpp文件中
		
	3，类的访问限定符及封装
	    a，C++实现封装的方式：用类将对象的属性与方法结合在一块，让对象更加完善，通过访问权限选择性的将其
               接口提供给外部的用户使用
		b，访问限定符
		   public:公有  protected:保护  private:
		   class的默认访问权限为private，struct为public(因为struct要兼容C)
		   注意：访问限定符只在编译时有用，当数据映射到内存后，没有任何访问限定符上的区别
		c，面向对象的三大特性：封装、继承、多态
		   封装：将数据和操作数据的方法进行有机结合，
		         隐藏对象的属性和实现细节，仅对外公开接口来和对象进行交互
				 
	4，类的作用域
	    类定义了一个新的作用域，类的所有成员都在类的作用域中。在类体外定义成员，需要使用 :: 作用域解析符
        指明成员属于哪个类域
		
	5，类的实例化
	    定义：用类类型创建对象的过程，称为类的实例化(类似于函数，声明尾开辟空间，形参实例化时才开辟空间)
		    <1>类只是一个模型一样的东西，限定了类有哪些成员，定义出一个类并没有分配实际的内存空间来存储它
			<2>一个类可以实例化出多个对象，实例化出的对象 占用实际的物理空间，存储类成员变量
			<3>类实例化出对象就像现实中使用建筑设计图建造出房子，类就像是设计图
			
	6，类对象模型
	    a，类对象的存储方式
		    只保存成员变量，成员函数存放在公共的代码段
		b，如何计算类的大小
		    1，空类与类中只有成员函数的情况，编译器给了一个字节来唯一标识这个类
			2，除了上述两种情况外，一个类的大小，实际就是该类中”成员变量”之和，当然也要进行内存对齐
			3，结构体对齐规则
			    1. 第一个成员在与结构体偏移量为0的地址处。
                2. 其他成员变量要对齐到某个数字（对齐数）的整数倍的地址处。
				   （注意：对齐数 = 编译器默认的一个对齐数与该成员大小的较小值）
				3. 结构体总大小为：最大对齐数（所有变量类型最大者与默认对齐参数取最小）的整数倍。
                4. 如果嵌套了结构体的情况，嵌套的结构体对齐到自己的最大对齐数的整数倍处，结构体的整体大小就是
                   所有最大对齐数（含嵌套结构体的对齐数）的整数倍。
				   
	7，this指针
	    a，this指针的类型：类类型* const
		b，只能在“成员函数”的内部使用
		c，this指针本质上其实是一个成员函数的形参，是对象调用成员函数时，将对象地址作为实参传递给this形参。
		   所以对象中不存储this指针
	    d，this指针是成员函数第一个隐含的指针形参，一般情况由编译器通过ecx寄存器自动传递，不需要用户
           传递
		
	8，构造函数
	    a，构造函数是特殊的成员函数，构造函数的虽然名称叫构造，但它的主要任务并不是开空间创建对象，而是初始化对象
		b，四个特征：
		    1. 函数名与类名相同。
			2. 无返回值。
			3. 对象实例化时编译器自动调用对应的构造函数。
			4. 构造函数可以重载。
				（注意：调用无参构造函数时：对象后面不用跟括号，否则就成了函数声明）
		c，如果类中没有显式定义构造函数，则C++编译器会自动生成一个无参的默认构造函数，
		   一旦用户显式定义编译器将不再生成
		d，无参构造函数、全缺省构造函数、我们没写编译器默认生成的构造函数，都可以认为是默认成员函数
		    （注意：默认构造函数只能有一个）
		e，C++把类型分成内置类型(基本类型)和自定义类型。
		   编译器生成默认的构造函数对内置类型不处理，只会对自定类型成员调用它的默认成员函数
			   
	9，析构函数
	    a，析构函数不是完成对象的销毁，局部对象销毁工作是由编译器完成的。
		   而对象在销毁时会自动调用析构函数，完成类的一些资源清理工作。
		b，四个特征：
		    1. 析构函数名是在类名前加上字符 ~。
			2. 无参数无返回值。
			3. 一个类有且只有一个析构函数。若未显式定义，系统会自动生成默认的析构函数。
			4. 对象生命周期结束时，C++编译系统系统自动调用析构函数。
		c，如果类中没有显式定义析构函数，则C++编译器会自动生成一个无参的默认析构函数，
		   一旦用户显式定义编译器将不再生成
		d，C++把类型分成内置类型(基本类型)和自定义类型。
		   编译器生成默认的析构函数对内置类型不处理，只会对自定类型成员调用它的默认成员函数